import { NextResponse } from 'next/server';

interface RequestBody {
  service: string;
  phone: string;
  fileName: string;
  pageCount: number;
  fileSize: string;
}

// –ú–∞–ø–ø–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
const SERVICE_NAMES: Record<string, string> = {
  projectdoc: '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
  brochure: '–ë—Ä–æ—à—é—Ä–æ–≤–∫–∞ –Ω–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—É—é –ø–ª–∞—Å—Ç–∏–Ω—É',
  hardcover: '–¢–≤—ë—Ä–¥—ã–π –ø–µ—Ä–µ–ø–ª—ë—Ç –¥–∏–ø–ª–æ–º–æ–≤',
  scanning: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
  patterns: '–ü–µ—á–∞—Ç—å –ª–µ–∫–∞–ª –∏ –≤—ã–∫—Ä–æ–µ–∫',
  presentations: '–ü–µ—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π',
  drawings: '–ü–µ—á–∞—Ç—å —á–µ—Ä—Ç–µ–∂–µ–π',
  copydoc: '–ü–µ—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
};

export async function POST(request: Request) {
  try {
    const requestBody: RequestBody = await request.json();
    const { service, phone, fileName, pageCount, fileSize } = requestBody;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!phone || !fileName) {
      return NextResponse.json(
        { success: false, error: '–¢–µ–ª–µ—Ñ–æ–Ω –∏ —Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const TG_TOKEN = process.env.TG_TOKEN;
    const TG_CHAT_ID = process.env.TG_CHAT_ID;

    if (!TG_TOKEN || !TG_CHAT_ID) {
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞' },
        { status: 500 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const serviceName = SERVICE_NAMES[service] || service;

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = `
üìå <b>${serviceName}</b>

üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}
üìÑ <b>–§–∞–π–ª:</b> ${fileName}
üìè <b>–†–∞–∑–º–µ—Ä:</b> ${fileSize}
üìë <b>–°—Ç—Ä–∞–Ω–∏—Ü:</b> ${pageCount}
    `;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    const telegramUrl = `https://api.telegram.org/bot${TG_TOKEN}/sendMessage`;
    const requestOptions = {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: TG_CHAT_ID,
        text: text,
        parse_mode: "HTML"
      }),
    };

    const response = await fetch(telegramUrl, requestOptions);
    const data = await response.json();

    if (!response.ok) {
      console.error('Telegram API Error:', data);
      throw new Error(data.description || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram');
    }

    return NextResponse.json({ 
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram',
      orderId: Date.now().toString(),
    });

  } catch (error: unknown) {
    console.error('Error:', error);
    const errorMessage = error instanceof Error 
      ? error.message 
      : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    
    return NextResponse.json(
      { 
        success: false, 
        error: errorMessage
      },
      { status: 500 }
    );
  }
}