// app/api/telegram/route.ts
import { NextResponse } from 'next/server';

export async function POST(request: Request) {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  console.log('--- NEW REQUEST ---');
  console.log('Request Headers:', Object.fromEntries(request.headers));

  try {
    // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const requestBody = await request.json();
    console.log('Request Body:', requestBody);
    
    const { name, phone, email, comment } = requestBody;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !phone) {
      console.error('Validation Error: Missing required fields');
      return NextResponse.json(
        { success: false, error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const TG_TOKEN = process.env.TG_TOKEN;
    const TG_CHAT_ID = process.env.TG_CHAT_ID;
    console.log('Env Variables:', { TG_TOKEN, TG_CHAT_ID });

    if (!TG_TOKEN || !TG_CHAT_ID) {
      console.error('Environment variables missing');
      return NextResponse.json(
        { success: false, error: 'Server configuration error' },
        { status: 500 }
      );
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = `üìå –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\nüë§ –ò–º—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nüìß Email: ${email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || '–Ω–µ—Ç'}`;
    console.log('Formatted message:', text);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    const telegramUrl = `https://api.telegram.org/bot${TG_TOKEN}/sendMessage`;
    console.log('Telegram API URL:', telegramUrl);

    const requestOptions = {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: TG_CHAT_ID,
        text: text,
        parse_mode: "HTML"
      }),
    };
    console.log('Telegram Request Options:', requestOptions);

    const response = await fetch(telegramUrl, requestOptions);
    const data = await response.json();
    console.log('Telegram API Response:', data);

    if (!response.ok) {
      console.error('Telegram API Error:', data);
      throw new Error(data.description || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram');
    }

    console.log('--- SUCCESS ---');
    return NextResponse.json({ 
      success: true, 
      data: {
        telegramResponse: data,
        yourData: requestBody
      }
    });

  } catch (error: any) {
    console.error('!!! ERROR !!!', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      },
      { status: 500 }
    );
  }
}